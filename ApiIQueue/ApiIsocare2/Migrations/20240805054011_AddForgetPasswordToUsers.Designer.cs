// <auto-generated />
using System;
using ApiIsocare2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiIsocare2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240805054011_AddForgetPasswordToUsers")]
    partial class AddForgetPasswordToUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ApiIsocare2.Models.BookingQueue", b =>
                {
                    b.Property<int>("queue_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("queue_id"));

                    b.Property<DateTime>("appointment_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("booking_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("queue_number")
                        .HasColumnType("int");

                    b.Property<int>("queue_status_id")
                        .HasColumnType("int");

                    b.Property<string>("queue_type_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("queue_id");

                    b.HasIndex("queue_status_id");

                    b.HasIndex("queue_type_id");

                    b.HasIndex("user_id");

                    b.ToTable("booking_queue", (string)null);
                });

            modelBuilder.Entity("ApiIsocare2.Models.CounterQueue", b =>
                {
                    b.Property<int>("queue_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("queue_id"));

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("queue_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("queue_number")
                        .HasColumnType("int");

                    b.Property<int>("queue_status_id")
                        .HasColumnType("int");

                    b.Property<string>("queue_type_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("queue_id");

                    b.HasIndex("queue_status_id");

                    b.HasIndex("queue_type_id");

                    b.ToTable("counter_queue", (string)null);
                });

            modelBuilder.Entity("ApiIsocare2.Models.QueueStatus", b =>
                {
                    b.Property<int>("queue_status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("queue_status_id"));

                    b.Property<string>("queue_status_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("queue_status_id");

                    b.ToTable("queue_status", (string)null);
                });

            modelBuilder.Entity("ApiIsocare2.Models.QueueType", b =>
                {
                    b.Property<string>("queue_type_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("type_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("queue_type_id");

                    b.ToTable("queue_type", (string)null);
                });

            modelBuilder.Entity("ApiIsocare2.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("user_id"));

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("citizen_id_number")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("reset_token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("user_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ApiIsocare2.Models.BookingQueue", b =>
                {
                    b.HasOne("ApiIsocare2.Models.QueueStatus", "QueueStatus")
                        .WithMany()
                        .HasForeignKey("queue_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIsocare2.Models.QueueType", "QueueType")
                        .WithMany()
                        .HasForeignKey("queue_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIsocare2.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueStatus");

                    b.Navigation("QueueType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiIsocare2.Models.CounterQueue", b =>
                {
                    b.HasOne("ApiIsocare2.Models.QueueStatus", "QueueStatus")
                        .WithMany()
                        .HasForeignKey("queue_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIsocare2.Models.QueueType", "QueueType")
                        .WithMany()
                        .HasForeignKey("queue_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueStatus");

                    b.Navigation("QueueType");
                });
#pragma warning restore 612, 618
        }
    }
}
