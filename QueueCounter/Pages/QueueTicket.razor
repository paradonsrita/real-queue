@page "/queue-ticket"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using QMS.Models
@using System.Text
@using Blazored.SessionStorage
@inject ISessionStorageService sessionStorage


<PageTitle>QueueTicket</PageTitle>

<h1>บัตรคิวของคุณ</h1>

@if (queueDetails != null)
{
    <div class="boxqueue card p-3 justify-content-center align-items-center ">
        <h4>หมายเลขคิว: @queueDetails.QueueNumber</h4>
        <p>รายการที่เลือก: @(queueTypeMappings.TryGetValue(queueDetails.QueueType, out var mappedType) ? mappedType : queueDetails.QueueType)</p>
        <p>วันที่และเวลา: @queueDetails.queue_date.ToString("dd/MM/yyyy HH:mm")</p>
        <p>* ถ้าเรียกคิวแล้วไม่อยู่ทำรายการ ขอสงวนสิทธิ์ในการข้ามคิว และต้องกดคิวใหม่เพื่อใช้บริการ *</p>
    </div>
    <button class="btn btn-secondary mt-3" @onclick="BackToBooking">กลับไปที่หน้ากดคิว</button>
    <button class="btn btn-secondary mt-3" @onclick="() => PrintData(queueDetails)">พิมพ์บัตรคิว</button>

}
else if (loading)
{
    <p>กำลังโหลดข้อมูล...</p>

}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">
        @ErrorMessage
    </div>
}
else
{
    <p>ไม่พบข้อมูล</p>
}

@code {

    public int QueueId { get; set; }
    private bool loading = true;
    private QueueModel queueDetails;
    private string htmlData;
    private int waitQueue;
    private string ErrorMessage;

    // Dictionary สำหรับแปลงค่า QueueType
    private Dictionary<string, string> queueTypeMappings = new Dictionary<string, string>
    {
        { "Finance", "เปิด-ปิดบัญชีฝากถอน" },
        { "Loan", "ขอกู้ จ่ายเงินกู้" },
        { "Shares", "สมัครสมาชิก ลาออก ซื้อ-ถอนหุ้น รับชำระหนี้" },
        {"Other", "อื่นๆ"}
    };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            QueueId = await sessionStorage.GetItemAsync<int>("queue"); // ดึงข้อมูลจาก SessionStorage

            var client = HttpClientFactory.CreateClient("Queue");
            var response = await client.GetAsync($"/api/Queue/{QueueId}");
            if (response.IsSuccessStatusCode)
            {
                queueDetails = await response.Content.ReadFromJsonAsync<QueueModel>();
                var queues = await client.GetFromJsonAsync<IEnumerable<QueueModel>>("/api/Queue");
                waitQueue = queues
                        .Where(q => q.QueueType == queueDetails.QueueType && q.QueueStatus == queueDetails.QueueStatus && q.queue_date.Date == queueDetails.queue_date.Date)
                        .Count();
                await PrintData(queueDetails);
            }
            else
            {
                ErrorMessage = $"API เกิดข้อผิดพลาด : {response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"API เกิดข้อผิดพลาด : {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async void BackToBooking()
    {
        await sessionStorage.RemoveItemAsync("queue");
        NavigationManager.NavigateTo("/");
    }

    private string TransformQueueType(string queueType)
    {
        return queueTypeMappings.TryGetValue(queueType, out var thaiValue) ? thaiValue : queueType;
    }

    private async Task PrintData(QueueModel queue)
    {
        htmlData = await GetPdfData(queue);
        await JSRuntime.InvokeVoidAsync("printPdf", htmlData);
        Console.WriteLine(htmlData);  // ตรวจสอบว่าข้อมูล htmlData ถูกสร้างหรือไม่

    }


    private async Task<string> GetPdfData(QueueModel queue)
    {
        var queueDateFormatted = queue.queue_date.ToString("dd/MM/yyyy HH:mm");

        //สร้าง HTML สำหรับ PDF
        var InputHtml = $@"
        <html>
        <head>
            <style>
                @page {{
                    width: 80mm;
                    height: auto;
                    margin: auto;
               
                }}
                .boxqueue {{
                    text-align: justify;
                }}
                .hidden-content {{
                    display: none;
                }}
                p {{
                    font-size: 80%
                }}
            </style>
        </head>
        <body>
            <div class='boxqueue'>
                <h3 style='text-align:start;'>หมายเลขคิว: </h3>
                <h2 style='text-align:start;'>{queue.QueueNumber}</h2>
                <p>รายการที่เลือก: {TransformQueueType(queue.QueueType)}</p>
                <p>วันที่และเวลา: {queueDateFormatted}</p>
                <p>คิวที่รอ: {waitQueue - 1}</p>
                <p>*ถ้าเรียกคิวแล้วไม่อยู่ทำรายการ ขอสงวนสิทธิ์ในการข้ามคิว และต้องกดคิวใหม่เพื่อใช้บริการ*</p>
            </div>
        </body>
        </html>";

        return InputHtml;

    }

}