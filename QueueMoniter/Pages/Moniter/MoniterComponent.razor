@page "/"
@using QMS.Models
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable




<h1 class="text-center"><b>Monitor</b></h1>




@if (queue != null)
{


    <h5>Counter queue</h5>

    <MonitorTable Source="counter" Queue="queue"></MonitorTable>

    

    <h5>Booking queue</h5>

    <MonitorTable Source="booking" Queue="queue"></MonitorTable>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<QueueModel> queue;
    private HubConnection? hubConnection;



    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://192.168.1.15:44328/notificationHub", options =>
        {
            options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, sslPolicyErrors) => true
                };
        })
        .WithAutomaticReconnect() // เพิ่มการเชื่อมต่อใหม่อัตโนมัติ
        .Build();

        hubConnection.On("RefreshPage", () =>
        {
            // ทำการรีเฟรชหรือโหลดข้อมูลใหม่
            InvokeAsync(async () => await LoadQueueData());
        });
        await hubConnection.StartAsync();
        await LoadQueueData(); // โหลดข้อมูลครั้งแรก

        
    }

    private async Task LoadQueueData()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("Queue");

            queue = await client.GetFromJsonAsync<List<QueueModel>>("/api/Monitor");
            InvokeAsync(StateHasChanged); // อัปเดต UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
}
