﻿
@page "/cancel-booking/"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime js
@using QMS.Models
@inject NavigationManager Navigation
@using System.Text.Json;
@inject TokenService TokenService
@inject DialogService DialogService


<div class="text-center border p-2 custom-border text-color" style="margin: auto; max-width: 90%; width: 550px;">
    <h1>ข้อมูลการจองคิว</h1>
</div>

<div>
    <p class="mt-5 text-center" style="font-size: 130%;">กรุณาปริ้นหลักฐานการจองหรือถ่ายภาพหน้าจอการข้อมูลการจองเพื่อยื่นให้พนักงาน</p>
    <p class="text-center" style="font-size: 130%;">ขอความกรุณาลูกค้าทุกท่านมาก่อนเวลานัด 30 นาที สำหรับยื่นหลักฐานการจองต่อพนักงาน และรอรับบริการ</p>
</div>




<div class="booking-container rz-p-0 rz-p-md-12">
    @if (isLoading == true)
    {
        <p>กำลังโหลด</p>
    }
    else if (FilteredBookings != null && FilteredBookings.Count() > 0)
    {
        <div class="justify-content-evenly">

            <RadzenButton Click="@(async args => await OpenFilterPopup())" Text="กรอง" />
        </div>
        

            <DetailCard Bookings="@bookings"
                            Variant="@variant"
                            OnBookingCancelled="LoadQueueData"
                            SelectedQueueType="@MapThaiToEnglish(selectedQueueType)"
                            AppointmentDateFilter="@appointmentDateFilter"
                            StartDate="@startDate"
                            EndDate="@endDate"
                            SelectedSortOption="@selectedSortOption">

                </DetailCard>
            
    }
    else
    {
        <RadzenAlert Severity="Error">@message</RadzenAlert>
    }
</div> 

@code {

    private Variant variant = Variant.Filled;
    private int? userId;
    private List<BookingModel> bookings = new List<BookingModel>();
    private string? message;
    private bool isLoading = false;

    // ตัวแปรสำหรับฟิลเตอร์
    private string selectedQueueType = "ทั้งหมด";
    private bool appointmentDateFilter = true;
    private DateTime? startDate;
    private DateTime? endDate;
    private string selectedSortOption = "วันที่นัดหมาย";

    private IEnumerable<BookingModel> FilteredBookings => bookings.Where(b => selectedQueueType == "ทั้งหมด" || b.QueueType == MapThaiToEnglish(selectedQueueType));




    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            await LoadQueueData();


        }
        catch (Exception ex)
        {
            message = $"เกิดข้อผิดพลาดในการโหลดข้อมูลการจอง: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }




    private async Task OpenFilterPopup()
    {
        var result = await DialogService.OpenAsync<FilterPopup>("", new Dictionary<string, object>
        {
            { "SelectedQueueType", selectedQueueType },
            { "AppointmentDateFilter", appointmentDateFilter },
            { "StartDate", startDate },
            { "EndDate", endDate },
            { "SelectedSortOption", selectedSortOption }
        }); 

        if (result != null)
        {
            // รับค่าจาก Popup และอัปเดตค่าฟิลเตอร์
            var filterResult = (FilterPopup.FilterResult)result;
            selectedQueueType = filterResult.SelectedQueueType;
            appointmentDateFilter = filterResult.AppointmentDateFilter;
            startDate = filterResult.StartDate;
            endDate = filterResult.EndDate;
            selectedSortOption = filterResult.SelectedSortOption;

            // รีโหลดข้อมูลคิว
            await LoadQueueData();
        }
    }


    private string MapThaiToEnglish(string selected)
    {
        return selected switch
        {
            "ทั้งหมด" => "All",
            "ขอกู้ จ่ายเงินกู้" => "Loan",
            "เปิด-ปิดบัญชีฝากถอน" => "Finance",
            "สมัครสมาชิก ลาออก ซื้อ-ถอนหุ้น รับชำระหนี้" => "Shares",
            "อื่นๆ" => "Other",
            _ => "All" // ค่าเริ่มต้นหากไม่มีการจับคู่
        };
    }

    private async Task LoadQueueData()
    {
        isLoading = true;
        var token = await TokenService.GetTokenAsync();
        if (string.IsNullOrEmpty(token) || TokenService.IsTokenExpired(token))
        {
            await TokenService.RemoveTokenAsync();
            Navigation.NavigateTo("/login");
            return;
        }
        var userId = TokenService.GetUserIdFromToken(token);
        if (userId.HasValue)
        {
            var client = HttpClientFactory.CreateClient("Queue");
            client.DefaultRequestHeaders.Authorization =
                     new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await client.GetAsync($"/api/Booking/profile/{userId.Value}");
            if (response.IsSuccessStatusCode)
            {
                bookings = await response.Content.ReadFromJsonAsync<List<BookingModel>>();

                StateHasChanged();
            }
            else
            {
                message = $"เกิดข้อผิดพลาดในการโหลดข้อมูล: {response.ReasonPhrase}";
            }
        }
        else
        {
            await TokenService.RemoveTokenAsync();
            Navigation.NavigateTo("/login");
        }
        isLoading = false;

    }

    
}