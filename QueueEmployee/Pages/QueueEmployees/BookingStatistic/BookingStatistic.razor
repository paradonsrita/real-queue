@page "/booking-statistic"
@using QMS.Models
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json



<h3>BookingStatistic</h3>
<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-6">
    <RadzenLabel Text="Select first date"/>
    <RadzenDatePicker @bind-Value="@minDate" DateFormat="MM/dd/yyyy" Name="DatePickerMinDate" Change="@(async args => await OnDateChanged())" />
    
    <RadzenLabel Text="Select end Date" />
    <RadzenDatePicker @bind-Value="@maxDate" DateFormat="MM/dd/yyyy" Name="DatePickerMinDate" Change="@(async args => await OnDateChanged())" />
</RadzenStack>

@if (statistics != null)
{

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" class="graph-container">
        <LineChartComponent Statistics="statistics"/>
        <ColumnChart Statistics="statistics" />
    </RadzenStack>


    
}
else
{
    <p>Loading...</p>
}


@code {
    private IEnumerable<Statistic> statistics;
    DateTime minDate = DateTime.Now;
    DateTime maxDate = DateTime.Now;
    bool showDataLabels = false;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task OnDateChanged()
    {
        // ค่าที่ไม่ต้องการการรีเฟรชหน้า
        if (minDate <= maxDate)
        {
            await LoadStatisticsAsync();
        }
        else
        {
            Console.WriteLine("The selected minDate cannot be greater than maxDate.");
            return;
        }
    }

    private async Task LoadStatisticsAsync()
    {
        statistics = await GetBookingStatisticsAsync(minDate, maxDate);
    }


    public async Task<IEnumerable<Statistic>> GetBookingStatisticsAsync(DateTime minDate, DateTime maxDate)
    {
        var url = $"https://localhost:44328/api/Statistics/booking-statistics?minDate={minDate:yyyy-MM-dd}&maxDate={maxDate:yyyy-MM-dd}";
        var response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<IEnumerable<Statistic>>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        throw new Exception($"Failed to retrieve booking statistics. Status code: {response.StatusCode}");
    }

    
}
