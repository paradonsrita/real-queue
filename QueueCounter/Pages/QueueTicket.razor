@page "/queue-ticket/{QueueId:int}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using QMS.Models



<h3>ใบคิวของคุณ</h3>

@if (queueDetails != null)
{
    <div class="card p-3">
        <h4>หมายเลขคิว: @queueDetails.QueueNumber</h4>
        <p>รายการที่เลือก: @TransformQueueType(queueDetails.QueueType)</p>
        <p>วันที่และเวลา: @queueDetails.queue_date.ToString("dd/MM/yyyy HH:mm")</p>
        <button class="btn btn-secondary mt-3" @onclick="BackToBooking">กลับไปที่หน้าจองคิว</button>
    </div>
}
else if (loading)
{
    <p>กำลังโหลดข้อมูล...</p>
}
else
{
    <p>ไม่พบข้อมูล</p>
}

@code {
    [Parameter]
    public int QueueId { get; set; }
    private bool loading = true;
    private string htmlData;


    private QueueModel queueDetails;

    // Dictionary สำหรับแปลงค่า QueueType
    private Dictionary<string, string> queueTypeMappings = new Dictionary<string, string>
    {
        { "Loan", "ขอกู้ รับชำระ จ่ายเงินกู้" },
        { "Finance", "เปิด-ปิดบัญชีฝากถอน" },
        { "Shares", "สมัครสมาชิก ลาออก ซื้อ-ถอนหุ้น" },
        { "Other", "อื่นๆ"}
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync($"https://localhost:44328/api/Queue/{QueueId}");
            if (response.IsSuccessStatusCode)
            {
                queueDetails = await response.Content.ReadFromJsonAsync<QueueModel>();
                PrintData(queueDetails);
            }
            else
            {
                Console.WriteLine($"API returned error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching queue details: {ex.Message}");
        }
        finally
        {
            loading = false;
            Console.WriteLine(queueDetails);
        }
    }

    private void BackToBooking()
    {
        NavigationManager.NavigateTo("/");
    }
    private string TransformQueueType(string queueType)
    {
        return queueTypeMappings.TryGetValue(queueType, out var thaiValue) ? thaiValue : queueType;
    }


    private async Task PrintData(QueueModel queue)
    {
        htmlData = await GetPdfData(queue);
        await JSRuntime.InvokeVoidAsync("printPdf", htmlData);
        Console.WriteLine(htmlData);  // ตรวจสอบว่าข้อมูล htmlData ถูกสร้างหรือไม่


    }


    private async Task<string> GetPdfData(QueueModel queue)
    {


        //สร้าง HTML สำหรับ PDF
        var InputHtml = $@"
<html>
<head>
    <style>
        h1 {{
            font-size: 20px;
            text-align: center;
        }}
        .content {{
            margin: 0 auto;
            width: 100%;
        }}
        .row {{
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
        }}
        .hidden-content {{
            display: none;
        }}
    </style>
</head>
<body>
    <div class='content'>
        <h1>ใบเสร็จ {queue.QueueNumber}</h1>
        <div class='row'>
            <div>รายการ</div>
            <div>จำนวนเงิน</div>
        </div>
        <div class='row'>
            <div>สินค้า 1</div>
            <div>100.00</div>
        </div>
        <div class='row'>
            <div>สินค้า 2</div>
            <div>200.00</div>
        </div>
        <hr />
        <div class='row'>
            <div>รวมทั้งหมด</div>
            <div>300.00</div>
        </div>
    </div>
</body>
</html>";


        return InputHtml;

    }

}


