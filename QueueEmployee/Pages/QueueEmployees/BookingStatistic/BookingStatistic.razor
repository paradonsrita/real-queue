@page "/statistic"
@using QMS.Models
@inject IHttpClientFactory HttpClientFactory
@using System.Net.Http.Json
@using System.Text.Json
@using System.Globalization




<RadzenCard Variant="Variant.Outlined" class="rz-my-4 shadow-lg">
    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Center">
        <div>รูปแบบ:</div>
        <RadzenSelectBar Value="@range" ValueChanged="OnRangeChanged" TValue="string" class="shadow">
            <Items>
                @foreach (var dataItem in options)
                {
                    <RadzenSelectBarItem Text="@dataItem.Text" Value="@dataItem.Value"/>
                }
            </Items>
        </RadzenSelectBar>
        <RadzenSelectBar Value="@selectedTransaction" ValueChanged="OnTransactionChanged" TValue="string" class="shadow">
            <Items>
                @foreach (var dataItem in transaction)
                {
                    <RadzenSelectBarItem Text="@dataItem.Text" Value="@dataItem.Value" />
                }
            </Items>
        </RadzenSelectBar>
    </RadzenStack>
</RadzenCard>

@if (range == "Daily")
{
    <RadzenCard Variant="Variant.Outlined" class="rz-my-4 shadow-lg">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
            <div>เลือกวันที่:</div>
            <RadzenDatePicker @bind-Value="@selectedDate" Style="width: 200px;" @onchange="OnFilterChanged" class="shadow" />
        </RadzenStack>
    </RadzenCard>
}
else if (range == "Monthly")
{
    <RadzenCard Variant="Variant.Outlined" class="rz-my-4 shadow-lg">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
            <div>เลือกเดือน:</div>
            <RadzenDropDown @bind-Value="@selectedMonth" Data="@months" TextProperty="Text" ValueProperty="Value"
                            Placeholder="เลือกเดือน" Style="width: 200px;" class="shadow" Change="@(args => OnFilterChanged(args))" />
            <div>เลือกปี:</div>
            <RadzenDropDown @bind-Value="@selectedYear" Data="@years" TextProperty="Text" ValueProperty="Value"
                            Placeholder="เลือกปี" Style="width: 150px;" class="shadow" Change="@(args => LoadStatisticsAsync())" />
        </RadzenStack>
    </RadzenCard>
}
else if (range == "Yearly")
{
    <RadzenCard Variant="Variant.Outlined" class="rz-my-4 shadow-lg">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
            <div>เลือกปี:</div>
            <RadzenDropDown @bind-Value="@selectedYear" Data="@years" TextProperty="Text" ValueProperty="Value"
                            Placeholder="เลือกปี" Style="width: 150px;" class="shadow" Change="@(args => LoadStatisticsAsync())" />
        </RadzenStack>
    </RadzenCard>
}


@if (statistics != null)
{

    <RadzenCard Variant="Variant.Outlined" class="rz-my-4 shadow-lg">
        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Center">
            
            <Summary Statistics="@statistics"/>
        </RadzenStack>
    </RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem" class="graph-container">
        @if (range != "Daily")
        {
            <LineChartComponent Statistics="statistics"/>

        }
        <ColumnChart Statistics="statistics"/>
    </RadzenStack>
    
}
else
{
    <p>Loading...</p>
}



@code {
    private IEnumerable<Statistic> responseStatistics;
    private IEnumerable<Statistic> statistics;


    private string range = "Daily";
    private string selectedTransaction = "All";

    private DateTime? selectedDate = DateTime.Now.Date;
    private string? selectedMonth = DateTime.Now.Month.ToString("00"); 
    private string? selectedYear = DateTime.Now.Year.ToString(); 
    private List<Option> options = new List<Option>
    {
        new Option { Text = "รายวัน", Value = "Daily" },
        new Option { Text = "รายเดือน", Value = "Monthly" },
        new Option { Text = "รายปี", Value = "Yearly" }

    };

    private List<Option> transaction = new List<Option>
    {
        new Option { Text = "ทั้งหมด", Value = "All" },
        new Option { Text = "ขอกู้ รับชำระ จ่ายเงินกู้", Value = "Loan" },
        new Option { Text = "ฝากถอน", Value = "Finance" },
        new Option { Text = "สมัครสมาชิก ลาออก ซื้อ-ถอนหุ้น", Value = "Shares" },
        new Option { Text = "อื่นๆ", Value = "Other" },
    };

    private List<Option> months = new List<Option>
    {
        new Option { Text = "มกราคม", Value = "01" },
        new Option { Text = "กุมภาพันธ์", Value = "02" },
        new Option { Text = "มีนาคม", Value = "03" },
        new Option { Text = "เมษายน", Value = "04" },
        new Option { Text = "พฤษภาคม", Value = "05" },
        new Option { Text = "มิถุนายน", Value = "06" },
        new Option { Text = "กรกฎาคม", Value = "07" },
        new Option { Text = "สิงหาคม", Value = "08" },
        new Option { Text = "กันยายน", Value = "09" },
        new Option { Text = "ตุลาคม", Value = "10" },
        new Option { Text = "พฤศจิกายน", Value = "11" },
        new Option { Text = "ธันวาคม", Value = "12" }
    };

    private List<Option> years = Enumerable.Range(DateTime.Now.Year - 10, 11)
                                           .Select(y => new Option { Text = y.ToString(), Value = y.ToString() })
                                           .OrderByDescending(y => y.Value)
                                           .ToList();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadStatisticsAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"โหลดข้อมูลไม่สำเร็จ: {ex.Message}");
        }
    }



    private async Task LoadStatisticsAsync()
    {

        try
        {
            responseStatistics = await GetBookingStatisticsAsync(int.Parse(selectedYear));
            ApplyFilter();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"โหลดข้อมูลไม่สำเร็จ: {ex.Message}");
        }
    }

    private void ApplyFilter()
    {
        if (range == "Daily" && selectedDate.HasValue)
        {
            statistics = responseStatistics.Where(s => s.Date.Date == selectedDate.Value.Date);
        }
        else if (range == "Monthly" && !string.IsNullOrEmpty(selectedMonth) && !string.IsNullOrEmpty(selectedYear))
        {
            var year = int.Parse(selectedYear);
            var month = int.Parse(selectedMonth);
            statistics = responseStatistics.Where(s => s.Date.Year == year && s.Date.Month == month);
        }
        else if (range == "Yearly" && !string.IsNullOrEmpty(selectedYear))
        {
            var year = int.Parse(selectedYear);
            statistics = responseStatistics.Where(s => s.Date.Year == year);
        }
        else
        {
            statistics = Enumerable.Empty<Statistic>();
        }


        if (selectedTransaction != "All")
        {
            statistics = statistics.Where(s => s.type_name == selectedTransaction);
        }
    }

    private void OnRangeChanged(object value)
    {
        range = value.ToString();
        ApplyFilter();
    }

    private void OnTransactionChanged(object value)
    {
        selectedTransaction = value.ToString();
        ApplyFilter();
    }

    private void OnFilterChanged(object value)
    {
        ApplyFilter();
    }

    public async Task<IEnumerable<Statistic>> GetBookingStatisticsAsync(int year)
    {
        var url = $"/api/Statistics/statistics?year={year}";
        var client = HttpClientFactory.CreateClient("Queue");

        var response = await client.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<IEnumerable<Statistic>>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        throw new Exception($"Status code: {response.StatusCode} โหลดข้อมูลไม่สำเร็จ");
    }

    
    public class Option
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
}
