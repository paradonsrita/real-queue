@page "/profile"
@using QMS.Data.Entities
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@using QMS.Models
@inject NavigationManager Navigation
@using System.Text.Json;
@inject TokenService TokenService
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.WebUtilities





<div class="text-center border p-2 custom-border text-color" style="margin: auto; max-width: 90%; width: 550px; font-size: 2.5rem;">
    <h1>ข้อมูลส่วนตัว</h1>
</div>
<br />
@if (user == null)
{
    <p>กำลังโหลดข้อมูล...</p>
}
else
{
    <RadzenCard Variant="@variant" class="rz-my-12 rz-mx-auto" Style="max-width: 420px">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
            <div>
                <p Style="font-size: 1.4rem;"><strong>หมายเลขบัตรประชาชน:</strong> @user.citizen_id_number</p>
                <br />
                <p Style="font-size: 1.4rem;"><strong>ชื่อ:</strong> @user.firstname @user.lastname</p>
                <br />
                <p Style="font-size: 1.4rem;"><strong>เบอร์โทรศัพท์:</strong> @user.phone_number</p>
                <br />
                <p Style="font-size: 1.4rem;"><strong>อีเมล:</strong> @user.user_email</p>
            </div>
            <RadzenButton Variant="Variant.Outlined" Click=@(args => ToEditProfile()) Text="แก้ไขโปรไฟล์" ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    </RadzenCard>

    <CascadingValue Value="@user.user_id">
        <!-- ค่าที่จะถูกส่งไปยังหน้าถัดไป -->
    </CascadingValue>
}



@code {
    Variant variant = Variant.Filled;
    private Models.UserModel user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("status", out var status) && status == "success")

                {

                    NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "ข้อมูลของคุณถูกเปลี่ยนเรียบร้อยแล้ว");
                    // ลบ Query String เพื่อป้องกันไม่ให้ Notification แสดงอีกเมื่อรีเฟรชหน้า
                    var cleanUri = new UriBuilder(uri) { Query = "" }.ToString();
                    Navigation.NavigateTo(cleanUri, forceLoad: true);

                }
                var token = await TokenService.GetTokenAsync();

                if (string.IsNullOrEmpty(token) || TokenService.IsTokenExpired(token))
                {
                    await TokenService.RemoveTokenAsync();
                    Navigation.NavigateTo("/login");
                    return;
                }

                
                    var userId = TokenService.GetUserIdFromToken(token);

                    if (userId.HasValue)
                    {
                        var client = HttpClientFactory.CreateClient("Queue");
                        // Set the Authorization header
                        client.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                        // Fetch user profile data from API
                        var response = await client.GetAsync($"/api/User?userId={userId.Value}");

                        if (response.IsSuccessStatusCode)
                        {
                            user = await response.Content.ReadFromJsonAsync<UserModel>();
                            StateHasChanged(); // Refresh the UI with the fetched data
                        }
                        else
                        {


                            // Handle errors such as 404 or other status codes
                            await TokenService.RemoveTokenAsync();
                            Navigation.NavigateTo("/login");
                        }
                    }
                    else
                    {
                        await TokenService.RemoveTokenAsync();
                        Navigation.NavigateTo("/login");
                    }


                
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user profile: {ex.Message}");
                await TokenService.RemoveTokenAsync();
                Navigation.NavigateTo("/login");
            }
        }
    }

    private void ToEditProfile()
    {
        Navigation.NavigateTo("/edit-user-profile");
    }
}

