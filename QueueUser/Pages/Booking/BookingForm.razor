@page "/Booking/DateInput/{type}"
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject IConfiguration Configuration


<h3>Selected Type: @type</h3>
<div>
    <label>User ID:</label>
    <input type="number" value="@userId" disabled />
</div>

<div>
    <label>Appointment Date:</label>
    <input type="date" @bind="appointmentDate" />
</div>
<div>
    <label>Appointment Time:</label>
    <select @bind="appointmentTime">
        <option value="">Select Time</option> <!-- ให้มีตัวเลือกให้เลือก -->
        <option value="08:00">08:00</option>
        <option value="13:00">13:00</option>
    </select>
</div>

<button @onclick="AddBooking" disabled="@(string.IsNullOrEmpty(appointmentTime))">Add Booking</button>
@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    [Parameter]  public string type { get; set; }
    private DateTime appointmentDate = DateTime.Now;
    private string appointmentTime;
    private int userId;
    private string message;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var token = await js.InvokeAsync<string>("localStorage.getItem", "jwtToken");

                if (!string.IsNullOrEmpty(token))
                {
                    // ตรวจสอบว่า token หมดอายุหรือไม่
                    if (JwtHelper.IsTokenExpired(token))
                    {
                        await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                        Navigation.NavigateTo("/login");
                        return;
                    }

                    var id = JwtHelper.GetUserIdFromToken(token, Configuration);

                    if (id.HasValue)
                    {
                        // Set the Authorization header
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                        userId = id.Value;

                        StateHasChanged();  // บังคับให้ UI re-render

                    }
                    else
                    {
                        await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                        Navigation.NavigateTo("/login");
                    }


                }
                else
                {
                    Navigation.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user profile: {ex.Message}");
                await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task AddBooking()
    {
        if (string.IsNullOrEmpty(appointmentTime))
        {
            message = "Please select an appointment time."; // แจ้งเตือนผู้ใช้เมื่อไม่ได้เลือกเวลา
            return;
        }
        var request = new AddBookingRequest
            {
                AppointmentDate = appointmentDate,
                AppointmentTime = appointmentTime,
                Type = type,
                UserId = userId
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:44328/api/Booking/add-queue", request);

            if (response.IsSuccessStatusCode)
            {
                // แสดงข้อความสำเร็จ
                message = "Booking added successfully!";
                ClearForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                message = $"Error adding booking: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }


    private void ClearForm()
    {
        appointmentDate = DateTime.Now;
        appointmentTime = null;
        type = type;
    }

    public class AddBookingRequest
    {
        public string AppointmentTime { get; set; }
        public DateTime AppointmentDate { get; set; }
        public string Type { get; set; }
        public int UserId { get; set; }
    }
}
