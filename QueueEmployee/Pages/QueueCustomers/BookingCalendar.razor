@page "/booking-calendar"
@inject HttpClient Http
@using System.Text.Json;
@using QMS.Models;


<h3>Booking Scheduler</h3>

@if (bookings == null && selectedTransaction == null)
{
    <p>Select a transaction type:</p>
    <RadzenDropDown @bind-Value="selectedTransaction" Data="transactions" Placeholder="Select transaction"
                    TValue="string" Change="OnTransactionSelected" />
}
else if (bookings == null && selectedTransaction != null)
{
    <p>Loading...</p>
}
else if (bookings.Count == 0)
{
    <p>No bookings found for the selected transaction.</p>
}
else
{
    <RadzenScheduler style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                     TextProperty="Text" SelectedIndex="2">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
        <RadzenYearView />
    </RadzenScheduler>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Time</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var queue in bookings)
            {
                <tr>
                    <td>@queue.Date</td>
                    <td>@queue.Time</td>
                    <td>@queue.Total</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Calendar> bookings;
    private string selectedTransaction;
    private List<string> transactions = new List<string> { "F", "L", "S" };


    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    private async Task OnTransactionSelected(object value)
    {
        
            selectedTransaction = value.ToString();

            try
            {
                Console.WriteLine($"Calling API for transaction: {selectedTransaction}");
                // เรียก API เมื่อเลือก transaction แล้ว
                bookings = await Http.GetFromJsonAsync<List<Calendar>>($"https://localhost:44328/api/Booking/calendar/{selectedTransaction}");
                
                // ตรวจสอบข้อมูลที่ได้รับจาก API
                if (bookings == null || bookings.Count == 0)
                {
                    Console.WriteLine("No data returned from API.");
                }
                else
                {
                    Console.WriteLine($"Received data: {bookings.Count}");
                }
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"HTTP error: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading bookings: {ex.Message}");
            }
            finally
            {
                StateHasChanged();  // อัพเดทหน้าเพจ
            }

            
        
    }

    public class Calendar
    {
        public DateTime Date { get; set; }
        public TimeSpan Time { get; set; }
        public int Total { get; set; }
    }

    
}