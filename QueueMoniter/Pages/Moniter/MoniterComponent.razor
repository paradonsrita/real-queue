@page "/"
@using QMS.Models
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IJSRuntime js







@if (queue != null)
{



    <MonitorTable Queue="queue"></MonitorTable>




}
else if(!string.IsNullOrEmpty(message))
{
    <RadzenAlert Severity="AlertSeverity.Error" Text="@message"
                 Style="width: 100%; font-size: 1rem; margin-top: 1rem;" />

}
else
{
    <p>Loading...</p>
}

@code {
    private List<QueueModel> queue;
    private HubConnection? hubConnection;
    private string message;



    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:44328/notificationHub", options =>
        {
            options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, sslPolicyErrors) => true
                };
        })
        .WithAutomaticReconnect() // เพิ่มการเชื่อมต่อใหม่อัตโนมัติ
        .Build();

        hubConnection.On("RefreshPage", () =>
        {
            // ทำการรีเฟรชหรือโหลดข้อมูลใหม่
            InvokeAsync(async () => await UpdateData());
        });
        await hubConnection.StartAsync();
        await LoadQueueData(); // โหลดข้อมูลครั้งแรก


    }

    private async Task LoadQueueData()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("Queue");

            queue = await client.GetFromJsonAsync<List<QueueModel>>("/api/Monitor");
            InvokeAsync(StateHasChanged); // อัปเดต UI
        }
        catch (Exception ex)
        {
            message = $"โหลดข้อมูลไม่สำเร็จเนื่องจากเกิดข้อผิดพลาด : {ex.Message}";            
        }
    }

    private async Task UpdateData()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("Queue");

            queue = await client.GetFromJsonAsync<List<QueueModel>>("/api/Monitor");
            InvokeAsync(StateHasChanged); // อัปเดต UI

            // ตรวจสอบค่า queue.FirstOrDefault() และส่งหมายเลขคิวไปยัง TriggerVoiceAlert
            var nextQueue = queue
                .OrderByDescending(q => q.CallQueueTime)
                .FirstOrDefault();

            if (nextQueue != null && !string.IsNullOrEmpty(nextQueue.QueueNumber))
            {
                await TriggerVoiceAlert(nextQueue.QueueNumber, nextQueue.Counter);
            }
        }
        catch (Exception ex)
        {
            message = $"โหลดข้อมูลไม่สำเร็จเนื่องจากเกิดข้อผิดพลาด : {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task TriggerVoiceAlert(string queueNumber, int? counter)
    {
        await js.InvokeVoidAsync("speakText", $"หมายเลขคิวถัดไป. {queueNumber} .ในช่องบริการที่. {counter}");  // ข้อความที่ต้องการให้แจ้งเตือน
    }
    
}
